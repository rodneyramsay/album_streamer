#!/usr/bin/perl
use Proc::Killfam;
use Getopt::Std;
use Term::ReadKey;

getopts("a:c:l:m:pqr");

if(defined($opt_m)) {
    $mount = $opt_m;
}
else {
    $mount = "/mnt/wd_my_cloud";
}

$run = 1;
$pid = 0;

@artists = ();
@categories = ();
@albums = ();

@play_artists = ();
@play_categories = ();
@play_albums = ();



#
# Directory structure organization:
#
#   Music/<Category>/<Artist>/<Album>/<Track>.flac
#
while($run) {
#   $run = 0;

   print("Building Album List");


   #
   # Check category directories
   #
   foreach $category (`ls $mount/`) {
      chomp($category);

      #
      # List of all categories for manipulating play list later.
      #
      push(@categories, $category);

      #
      # List of categories to play now.
      #
      if(!defined($opt_c) || ($category =~ m/$opt_c/)) {
	 $play_categories{$category} = $category;
	 push(@play_categories, $category);
      }


      #
      # Check artist directories
      #
      foreach $artist (`ls $mount/$category/`) {
	 chomp($artist);

	 #
	 # List of all artists
	 #
	 push(@artists, $artist);

	 #
	 # If -a option only want to play artists matching name..
	 # List of artists to play now.
	 #
	 if(defined($play_categories{$category}) &&
		    (!defined($opt_a) || ($artist =~ m/$opt_a/))) {

	    $play_artists{$artist} = $artist;
	    push(@play_artists, $artist);
	 }


	 #
	 # Check album directories
	 #
	 foreach $album (`ls $mount/$category/$artist`) {
	    print(".");

	    chomp($album);

	    #
	    # For multi-disk albums, only remember disc 1.
	    # Play multi-disk albums all together later...
	    #
	    if($album =~ m/disk_?(\d+)/i) {
	       $disk_num = $1;
	       next unless($disk_num =~ m/0*1/);
	    }

	    #
	    # All Album names
	    #
	    push(@album_names, $album);

	    $album_path = "${mount}/${category}/${artist}/${album}";

	    #
	    # Build lists of albums.
	    #
	    push(@{$albums{$category}}, $album_path);
	    push(@{$albums{$artist}}, $album_path);

	    #
	    # List of album full paths.
	    #
	    push(@albums, $album_path);

#	    $last_track = `ls $album_path | tail -1`;
#	    $last_track{$album_path} = "${mount}/${category}/${artist}/${album}/${last_track}";

	    #
	    # -l option only play matching albums.
	    #
	    if(defined($play_categories{$category}) && defined($play_artists{$artist})) {
	       if(!defined($opt_l) || ($album =~ m/$opt_l/)) {
		  push(@play_albums, "${mount}/${category}/${artist}/${album}");
	       }
	    }
	 }
      }
   }

   #
   # Start streaming albums
   #
   print("\n\n========================== YASS! ==================================\n\n");

   #
   # Randomize array
   #
   if(defined($opt_r)) {
      @play_albums = &rand_array(@play_albums);
      @play_albums = &rand_array(@play_albums);
      @play_albums = &rand_array(@play_albums);
   }

   #
   # Print out cuesheet unless quiet mode.
   #
   unless(defined($opt_q)) {
      foreach $play_album (@play_albums) {
	 print("CUESHEET:$play_album\n");
      }
   }

   &play_albums(@play_albums);

   last if(defined($opt_p));
}


#
#
#
sub play_albums() {

   my (@albums) = (@_);

   #
   # Loop through albums and play all tracks in album folder.
   #
   foreach $ii (0 .. $#albums) {
      print("Album Name: $albums[$ii]\n");
      $play_album = $albums[$ii];

      #
      # Does this album end with disk_<n>?
      # Cut off the disk number and play them all
      #
      if($play_album =~ m/(dis(c|k)_?(\d+))/i) {
	 ($disc_name, $ck, $disc_num) = ($1, $2, $3);

	 print("DISC_NAME=$disc_name DISC_NUM=$disc_num\n");
	 
	 $play_album =~ s/$disc_num//;
      }

      unless(defined($opt_p)) {

	 #
	 # Fork off process to stream music. Use <Album_Name>* to catch all disc numbers.
	 #
	 $sub_id = &print_run("play ${play_album}*/*.flac");
      }

      #
      # Master process wait for user input.
      #
      # x = exit
      # n = next album in queue (Need to fix for last album in queue)
      # t = next track on album (Need to fix for last track of album)
      #
      if($sub_id > 0) {
	 my $key_pressed = 'c';
	 while($key_pressed ne 'x') {

	    #
	    # Master process - Wait for one key input.
	    #
	    ReadMode 'cbreak';
	    $key_pressed = ReadKey(0);
	    ReadMode 'normal';
	    
	    if($key_pressed) {

	       print("KEY PRESSED:$key_pressed SUB_ID:$sub_id\n");

	       #
	       # x for exit. Kill streamer process and quit.
	       #
	       if($key_pressed eq 'x') {
		  print("Killing:$sub_id\n");
		  killfam 9, $sub_id;
		  waitpid $sub_id, 0;
		  exit;
	       }
	       #
	       # n for next album. Kill streamer process and go back around to top of loop.
	       #
	       elsif($key_pressed eq 'n') {
		  print("Next Album\n");
		  killfam 9, $sub_id;
		  last;
	       }
	       #
	       # Next track - send Ctrl-C to SoX to skip to next track.
	       #
	       elsif($key_pressed eq 't') {
		  print("Next Track\n");
		  #
		  # Last track of the album jump to next album.
		  #
		  if($current_track eq $last_track{$album}) {
		  }
		  #
		  # Send Ctrl-C
		  #
		  else {
		     killfam 2, $sub_id;
		  }
	       }
	    }
	 }

	 if($sub_id) {
	    waitpid $sub_id, 0;
	 }
      }
   }
}

#
# Print command and run it.
#
sub print_run() {
   ($cmd) = (@_);

   print("$cmd\n");

   $pid = fork;
   die "Failed to fork $!\n" unless defined $pid;
   
   if($pid == 0) {

      system($cmd);
      exit;
   }

   return $pid;
}


#
# Randomize array order.
# Thanks to Perl.LiveJournal.com
# https://perl.livejournal.com/101830.html
#
sub rand_array {
   my @array = @_;
   my @rand = undef;
   $seed = $#array + 1;
   my $randnum = int(rand($seed));
   $rand[$randnum] = shift(@array);
   while (1) {
      my $randnum = int(rand($seed));
      if ($rand[$randnum] eq undef) {
	 $rand[$randnum] = shift(@array);
      }
      last if ($#array == -1);
   }
   return @rand;
}
